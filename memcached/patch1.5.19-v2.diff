diff -ur a/memcached.c b/memcached.c
--- a/memcached.c	2019-10-01 04:33:41.000000000 +0200
+++ b/memcached.c	2019-10-31 11:20:48.959919655 +0100
@@ -53,6 +53,11 @@
 #include <sysexits.h>
 #include <stddef.h>
 
+/*
+* Added by lovitana
+*/
+#include <propose_api.h>
+
 #ifdef HAVE_GETOPT_LONG
 #include <getopt.h>
 #endif
@@ -77,6 +82,19 @@
 #endif
 
 /*
+ *ADDED BY lovitana
+ */
+
+void launch_dummy_thread(void);
+void drain_dummy_client(int fd);
+void *dummy_client(void *arg);
+void follower_cb(void *userdata, char *buf, int data_len);
+
+/*
+ * END
+ */
+
+/*
  * forward declarations
  */
 static void drive_machine(conn *c);
@@ -3012,6 +3030,39 @@
     item *new_it = NULL;
     uint32_t flags;
 
+
+	/*
+	*ADDED BY lovitana
+	*/
+	// size_t q_size = it->nbytes + c->last_cmd_size + 2;
+	// char* query = calloc(q_size + 1, sizeof(char));
+	// char *tmp_ptr = query;
+	// tmp_ptr += sprintf(query,"%s\r\n",c->last_cmd);
+	// memcpy(tmp_ptr,ITEM_data(it),it->nbytes);
+	// query[q_size] = '\0';
+	// free(c->last_cmd);
+    // free(query);
+
+    char query[2048];
+    size_t q_size = it->nbytes + c->last_cmd_size + 2;
+
+    if (q_size > 2048) {
+        fprintf(stderr, "Query size exceeded\n");
+        exit(EXIT_FAILURE);
+    }
+
+    memcpy(query, c->last_cmd, c->last_cmd_size - 1);
+    query[c->last_cmd_size - 1] = '\r';
+    query[c->last_cmd_size] = '\n';
+    memcpy(query + c->last_cmd_size + 1, ITEM_data(it), it->nbytes);
+    query[q_size] = '\0';
+
+	consensus_propose((uint8_t*)query, q_size);
+
+	/*
+	*END ADDITION
+	*/
+
     if (old_it != NULL && comm == NREAD_ADD) {
         /* add only adds a nonexistent item, but promote to head of LRU */
         do_item_update(old_it);
@@ -5755,6 +5806,18 @@
 #endif
 static void process_command(conn *c, char *command) {
 
+	/*
+	* ADDED by lovitana
+	*/
+
+	fprintf(stderr,"\ncopy cmd\n");
+	c->last_cmd_size = strlen(command)+1;
+	memcpy(c->last_cmd, command, c->last_cmd_size);
+	fprintf(stderr,"\ncopy cmd\n");
+	/*
+	*END
+	*/
+
     token_t tokens[MAX_TOKENS];
     size_t ntokens;
     int comm;
@@ -8238,8 +8301,167 @@
     return reuse_mmap;
 }
 
+
+/*
+*ADDED BY lovitana
+*/
+int  dummy_client_sockfd = -1;
+// pthread_mutex_t dummy_client_mutex = PTHREAD_MUTEX_INITIALIZER;
+// pthread_cond_t dummy_client_cond = PTHREAD_COND_INITIALIZER;
+
+void drain_dummy_client(int fd) {
+    char tmp[1024];
+    printf("Reading pump started\n");
+
+    while (true) {
+        int ret = read(fd, tmp, 1024);
+        if (ret == -1) {
+            perror("read");
+        }
+
+        tmp[ret] = 0;
+        printf("Read: %s", tmp);
+    }
+}
+
+void *dummy_client(void *arg) {
+    (void) arg;
+
+    fprintf(stderr, "Waiting 30s for memcached to start...\n");
+    sleep(30);
+    fprintf(stderr, "We hope that memcached started. We spawn the dummy client now...\n");
+    // Connect using tcp
+    int sockfd;
+    struct sockaddr_in servaddr;
+
+    // socket create and varification
+    sockfd = socket(AF_INET, SOCK_STREAM, 0);
+    if (sockfd == -1) {
+        fprintf(stderr,"socket creation failed...\n");
+        exit(0);
+    }
+    else
+        fprintf(stderr,"Socket successfully created..\n");
+    bzero(&servaddr, sizeof(servaddr));
+
+    // assign IP, PORT
+    servaddr.sin_family = AF_INET;
+    servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
+    servaddr.sin_port = htons(11222);
+
+    // connect the client socket to server socket
+    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) != 0) {
+        fprintf(stderr,"connection with the server failed...\n");
+        exit(0);
+    }
+    else
+        fprintf(stderr,"connected to the server..\n");
+
+    // We're going to manipulate done and use the cond, so we need the mutex
+    // pthread_mutex_lock(&dummy_client_mutex);
+
+    // Increase the count of threads that have finished their work.
+    dummy_client_sockfd = sockfd;
+    fprintf(stderr,"[thread] dummy_client_sockfd is now %d.\n", dummy_client_sockfd);
+
+    __sync_synchronize();
+
+    // wait up the main thread (if it is sleeping) to test the value of done
+    // pthread_cond_signal(&dummy_client_cond);
+    // pthread_mutex_unlock(&dummy_client_mutex);
+
+    drain_dummy_client(sockfd);
+
+    return NULL;
+}
+
+void launch_dummy_thread() {
+	// Thread id
+	pthread_t threadId;
+
+	// Create a thread that will funtion threadFunc()
+	int err = pthread_create(&threadId, NULL, &dummy_client, NULL);
+
+    // Check if thread is created sucessfuly
+	if (err) {
+		fprintf(stderr, "Thread creation failed : %s\n", strerror(err));
+	}
+
+	err = pthread_detach(threadId);
+	if (err) {
+		fprintf(stderr, "Failed to detach Thread : %s\n", strerror(err));
+    }
+}
+
+void follower_cb(void *userdata, char *buf, int data_len) {
+    int fd = *(int *)userdata;
+
+    data_len--;
+
+    fprintf(stderr, "Write started (%d)\n[", data_len);
+    for (int i = 0; i < data_len; i++) {
+        if (buf[i] == '\n') {
+            fprintf(stderr, "\\n");
+        } else if (buf[i] == '\r') {
+            fprintf(stderr, "\\r");
+        } else {
+            fprintf(stderr, "%c", buf[i]);
+        }
+    }
+    fprintf(stderr, "]\n");
+
+    ssize_t bytes_written = write(fd, buf, data_len);
+    if (bytes_written == -1) {
+        perror("write");
+    }
+
+    while (bytes_written < data_len) {
+        ssize_t ret = write(fd, buf + bytes_written, data_len - bytes_written);
+        if (ret == -1) {
+            perror("write");
+        }
+
+        bytes_written += ret;
+    }
+    fprintf(stderr, "Write ended\n");
+}
+
+
+/*
+* END
+*/
+
+
+
 int main (int argc, char **argv) {
-    int c;
+    /*
+	* ADDED BY lovitana
+	*/
+	int is_leader = getenv("IS_LEADER") ? 1 : 0;
+
+    if (is_leader) {
+        consensus_setup(follower_nop_cb, NULL);
+    } else {
+        launch_dummy_thread();
+        __sync_synchronize();
+        consensus_setup(follower_cb, &dummy_client_sockfd);
+    }
+    consensus_start_leader_election();
+
+	/*
+	* END
+	*/
+
+
+
+
+
+
+
+
+
+
+	int c;
     bool lock_memory = false;
     bool do_daemonize = false;
     bool preallocate = false;
@@ -9769,6 +9991,14 @@
     }
 
     fprintf(stderr, "Gracefully stopping\n");
+	/*
+	*ADDED BY lovitana
+	*/
+    consensus_stop_leader_election();
+    consensus_shutdown();
+	/*
+	* END
+	*/
     stop_threads();
     int i;
     // FIXME: make a function callable from threads.c
diff -ur a/memcached.h b/memcached.h
--- a/memcached.h	2019-10-01 04:33:41.000000000 +0200
+++ b/memcached.h	2019-10-31 11:08:40.815224000 +0100
@@ -717,6 +717,13 @@
     ssize_t (*read)(conn  *c, void *buf, size_t count);
     ssize_t (*sendmsg)(conn *c, struct msghdr *msg, int flags);
     ssize_t (*write)(conn *c, void *buf, size_t count);
+
+    /*
+	* ADDED BY lovitana
+	*/
+	char last_cmd[1024]; //contains the last commands buffer
+	size_t last_cmd_size;
+
 };
 
 /* array of conn structures, indexed by file descriptor */
diff -ur a/thread.c b/thread.c
--- a/thread.c	2019-10-01 04:33:41.000000000 +0200
+++ b/thread.c	2019-10-31 11:19:56.823738000 +0100
@@ -21,6 +21,11 @@
 #include <openssl/ssl.h>
 #endif
 
+/*
+* Added by lovitana
+*/
+#include <propose_api.h>
+
 #define ITEMS_PER_ALLOC 64
 
 /* An item in the connection queue. */
@@ -652,11 +657,32 @@
  * lazy-expiring as needed.
  */
 item *item_get(const char *key, const size_t nkey, conn *c, const bool do_update) {
+    fprintf(stderr, "ITEM GET\n");
     item *it;
     uint32_t hv;
     hv = hash(key, nkey);
     item_lock(hv);
+
+	/*
+	*ADDED BY lovitana
+	*/
+    char query[2048] = {'g', 'e', 't', ' '};
+    if (4 + nkey + 4 > 2048) {
+        fprintf(stderr, "Query size exceeded\n");
+        exit(EXIT_FAILURE);
+    }
+
+    char suffix[] = {' ', '\r', '\n', '\0'};
+    memcpy(query + 4, key, nkey);
+    memcpy(query + 4 + nkey,  suffix, 3);
+
+	consensus_propose((uint8_t*)query, 4 + nkey + 4);
+	/*
+	*END ADDITION
+	*/
+
     it = do_item_get(key, nkey, hv, c, do_update);
+
     item_unlock(hv);
     return it;
 }
@@ -924,4 +950,3 @@
     wait_for_thread_registration(nthreads);
     pthread_mutex_unlock(&init_lock);
 }
-
